var browserSync = require('browser-sync');
var gulp = require('gulp');
var config = require('../config');
var path = require('path');
var fs = require('fs');
var handleErrors = require('../util/handle-errors');

gulp.task('browserSync', function () {
    browserSync({
        open: false,
        server: [
            './dist',
            './assets/data',
            // TODO 考虑通过这样来在local serve访问得到依赖
            // './node_modules/lib',
            // './node_modules/common',
        ],
        notify: false,
        logLevel: "info",
        logPrefix: 'LOCAL SERVE',
        middleware: [
            mockApi
        ]
    }, function (err, bs) {
        var local = bs.options.getIn(["urls", "local"]);
        var external = bs.options.getIn(["urls", "external"]);
        console.log('[' + 'LOCAL SERVE'.blue + ']' + ' Entry:');
        console.log(' --------------------------------------'.grey);
        console.log('       Local: ' + (local + '/' + config.name + '/index.html').magenta);
        console.log('    External: ' + (external + '/' + config.name + '/index.html').magenta);
        console.log(' --------------------------------------'.grey);
    });
    // console.log('测试入口:' + )
});

/**
 * 处理mock接口数据返回
 * @param  {[type]}   req  [description]
 * @param  {[type]}   res  [description]
 * @param  {Function} next [description]
 * @return {[type]}        [description]
 */
function mockApi(req, res, next) {
    // 检测是否满足mock api规则
    var arr = req.url.match(/[^\/.]+\.json/);
    if (arr && arr.length > 0) {
        // 默认错误信息
        var data = '{"error":"fail to process mock api, please check your code."}';
        var fileName = arr[0];
        try {
            data = fs.readFileSync(path.join('./assets/data', fileName), 'utf8');
        } catch (error) {
            handleErrors(new Error('Fail to get api mock data file:, fileName: "' + fileName + '", check your code or json file'));
        }
        res.setHeader('content-type', 'application/json');
        res.end(data);
    } else {
        next();
    }
}
